/**
 *  File:
 *   osr_summary.ycp
 *
 *  Module:
 *   YaST2 OS Repair
 *
 *  Summary:
 *  
 *
 *  Authors:
 *   Michael Koehrmann <curry@suse.de>, 2001
 *
 *  Create a unified-looking RichText description of the not configured/configured devices.
 *  This is used in <module_name>_summary.ycp modules.
 *
 * $Id$
 */
{
  textdomain "osr";

  /**
   *  Function that creates the shown text in the RichText widget. "Not detected"
   *  will be returned if the list is empty.
   *
   *  API function.
   *
   *  @param list A list of output of the summaryDevice() calls
   *  @return string The formatted text.
   */
  global define OSRSummaryItemList(list items) ``{
	
      string text = "";

      if (size(items) == 0)
      {
	  text = sformat("<ul><li>%1</li></ul>", _("Not detected."));
      }
      else
      {
	  foreach(`entry, items, ``{
	      text = text + entry;
	  });
	  //text = sformat("<ul>%1</ul>", text);
	  text = sformat("%1", text);
      }
      return text;
  };
    
  /**
   *  Function that creates the description for one item.
   *
   *  API function.
   *
   *  @param string The name of the item.
   *  @param string Additional description.
   *  @param string The status of the rescue system. Possible values are:
   *                "detect_ok", "detect_error", "repair_ok", "repair_error", "repair_omit.
   *  @return string The formatted text.
   */
  global define OSRSummaryItem(string name, string description, string status) ``{

      string  color          = "";
      string  status_text    = "";
      integer text_width     = 0;

      boolean initial_mode   = false;
      boolean continue_mode  = false;

      initial_mode  = lookup(osr_map, "initial_mode", false);
      continue_mode = lookup(osr_map, "continue_mode", false);

      // The width of the RichText-widget depends on the execution-mode, it is
      // expanded if the rescue-system is launched from the running Linux-system.
      if (!initial_mode && !continue_mode)
      {
	  text_width = 380;
      }
      else
      {
	  text_width = 470;
      }

      // if an error is found the item has to be dislpayed red
      if (status == "detect_ok")
      {
	  color = "blue";
	  status_text = _("o.k.");
      }
      else if (status == "detect_error")
      {
	  color = "red";
	  status_text = _("error");
      }
      else if (status == "repair_ok")
      {
	  color = "green";
	  status_text = _("repaired");
      }
      else if (status == "repair_error")
      {
	  color = "red";
  	  status_text = _("failed");
      }
      else if (status == "repair_omit")
      {
	  color = "red";
  	  status_text = _("omitted");
      }
      else
      {
	  y2error("OSRSummaryItem ERROR: not a valid status: %1", status);
	  color = "blue";
      }

      // Check if the UI is running with ncurses or qt
      if (UI::HasSpecialWidget(`Slider))
      {
	  return sformat(
			 "<center><table width=%5><tr><th align=left>%1</th><th align=right><font color=%4>%2</font></th></tr><tr><td align=left>%3</td></tr></table></center>",
			 name,
			 status_text,
			 description,
			 color,
			 text_width
			 );
      }
      else
      {
	  return sformat(
			 "<li>%2: <b>%3</b><br>%4</li>",
			 color,
			 name,
			 status,
			 description
			 );
      }
  };

  /**
   *  Updates the contents of the RichText widget.
   *
   *  API function.
   *
   *  @return boolean True if the RichText widget was changed successfully.
   */
  global define OSRSummaryUpdate() ``{

      integer index           = 0;
      string  text            = "";
      string  module_name     = "";	
      list    module_sequence = lookup(osr_map, "module_sequence", []);
      list    summary         = [];
      list    summary_list    = [];
      string  summary_text    = "";
      string  h_rule          = "";
      map     module_map      = $[];
      map     summary_map     = $[];

      if (size(module_sequence) > 0)
      {
	  while ( (index >= 0) && (index < size(module_sequence)) )
	  {
	      module_name = select(module_sequence, index);
	      module_map  = lookup(osr_map, module_name, $[]);

	      // get the list of module-summaries, it looks like:
	      // [ $["description":"Package is o.k.", "error":false, "header":"LILO package"],
              //   $["description":"File exists at <code> /etc/lilo.conf </code>", ... ]
	      summary = lookup(module_map, "summary", []);

	      if (summary != [])
	      {
		  summary_text = "";
		  summary_list = [];
		  summary_map  = $[];
		  
		  integer i = 0;
		  while ((i >= 0) && (i < size(summary)))
		  {
		      summary_map = select(summary, i);

		      // get the formatted summaries as list:
		      // [ "<li><font color=blue>LILO package</font><br>Package is o.k.</li>",
		      //   "<li><font color=blue>LILO configuration file</font><br>File exists at <code> /etc/lilo.conf </code></li>", ... ]
		      summary_list = add(summary_list, OSRSummaryItem(
								      lookup(summary_map, "header",      ""),
								      lookup(summary_map, "description", ""),
								      lookup(summary_map, "status",      "detect_ok")
								      ));
 
		      i = i + 1;
		  }
		  // get the summaries as formatted text:
		  // <ul><li><font color=blue>LILO package</font><br>Package is o.k.</li>
		  //     <li><font color=blue>LILO configuration file</font><br>File exists at <code> /etc/lilo.conf </code></li> ... </ul>
		  summary_text = OSRSummaryItemList(summary_list);

		  // insert a horizontal-rule between two paragraphs
		  if (text != "")
		  {
		      h_rule = "<hr>";
		  }
		  
		  // set the final text:
		  // <p><b>LILO:</b></p>
		  // <p><ul><li><font color=blue>LILO package</font><br>Package is o.k.</li>
		  //        <li><font color=blue>LILO configuration file</font><br>File exists at <code> /etc/lilo.conf </code></li> ...
		  // </ul></p>		  
		  text = text + sformat(
					"%3<p><b>%1:</b></p><p>%2</p>",
					lookup(lookup(osr_map, module_name), "headline", ""),
					summary_text,
					h_rule
					);
	      }
	      index = index + 1;
	  }
      }
      else
      {
	  y2error("ERROR OSRSummaryUpdate: no modules in module_sequence!");
      }
      return UI::ChangeWidget(`id(`rich_text_info), `Value, text);
  };

  /**
   *  Changes the summary of the specified module in the RichText widget.
   *
   *  For internal use only.
   *
   *  @param string The name of the module which summary is to be changed.
   *  @param string The first line of the new text.
   *  @param string The second line of the new text.
   *  @param string The status of the rescue-system, possible values are:
   *                "detect_ok", "detect_error", "repair_ok", "repair_error" and "repair_omit"
   *  @return boolean True if the RichText widget was updated successfully.
   */
  global define OSRSummaryChangeModuleSummary(
					      string module_name,
					      string header,
					      string description,
					      string status
					      ) ``{
      
      map     module_map      = $[];
      list    summary         = [];
      map     entry           = $[];

      module_map = lookup(osr_map, module_name, $[]);

      if (module_map == $[])
      {
	  y2error("OSRSummaryChangeModuleSummary ERROR: no module map");
	  return false;
      }

      if (
	  (status != "detect_ok") &&
	  (status != "detect_error") &&
	  (status != "repair_ok") &&
	  (status != "repair_error") &&
	  (status != "repair_omit")
	  )
      {
	  y2error("OSRSummaryChangeModuleSummary ERROR: not a valid status: %1", status);
      }
      
      //entry      = $["header" : header, "description" : description, "error" : error_detected, "repair" : error_repair];

      // possible values for the key "status" are:
      // "detect_ok", "detect_error", "repair_ok", "repair_error" and "repair_omit"
      entry      = $["header" : header, "description" : description, "status" : status];
      summary    = lookup(module_map, "summary", $[]);

      summary    = add(summary, entry);
      module_map = add(module_map, "summary", summary);
      osr_map    = add(osr_map, module_name, module_map);

      return OSRSummaryUpdate();
  };

  /**
   *  Changes the summary of the specified module in the RichText widget. Shows that
   *  the rescue system has found no error. Blue font is used for the headline.
   *
   *  API function.
   *
   *  @param string The name of the module which summary is to be changed.
   *  @param string The first line of the new text.
   *  @param string The second line of the new text.
   *  @return boolean True if the RichText widget was updated successfully.
   */
  global define OSRSummaryDetectOK(string module_name, string header, string description) ``{

      return (OSRSummaryChangeModuleSummary(module_name, header, description, "detect_ok"));
  }

  /**
   *  Changes the summary of the specified module in the RichText widget. Shows that
   *  the rescue system has detected an error. Red font is used for the headline.
   *
   *  API function.
   *
   *  @param string The name of the module which summary is to be changed.
   *  @param string The first line of the new text.
   *  @param string The second line of the new text.
   *  @return boolean True if the RichText widget was updated successfully.
   */
  global define OSRSummaryDetectError(string module_name, string header, string description) ``{

      return (OSRSummaryChangeModuleSummary(module_name, header, description, "detect_error"));
  }

  /**
   *  Changes the summary of the specified module in the RichText widget. Shows that
   *  the rescue system repaired the detected error. ??? font is used for the headline.
   *
   *  API function.
   *
   *  @param string The name of the module which summary is to be changed.
   *  @param string The first line of the new text.
   *  @param string The second line of the new text.
   *  @return boolean True if the RichText widget was updated successfully.
   */
  global define OSRSummaryRepairOK(string module_name, string header, string description) ``{

      return (OSRSummaryChangeModuleSummary(module_name, header, description, "repair_ok"));
  }

  /**
   *  Changes the summary of the specified module in the RichText widget. Shows that
   *  an error occurred during the repair-process. ??? font is used for the headline.
   *
   *  API function.
   *
   *  @param string The name of the module which summary is to be changed.
   *  @param string The first line of the new text.
   *  @param string The second line of the new text.
   *  @return boolean True if the RichText widget was updated successfully.
   */
  global define OSRSummaryRepairError(string module_name, string header, string description) ``{

      return (OSRSummaryChangeModuleSummary(module_name, header, description, "repair_error"));
  }

  /**
   *  Changes the summary of the specified module in the RichText widget. Shows that
   *  the repair process was omitted by the user.
   *
   *  API function.
   *
   *  @param string The name of the module which summary is to be changed.
   *  @param string The first line of the new text.
   *  @param string The second line of the new text.
   *  @return boolean True if the RichText widget was updated successfully.
   */
  global define OSRSummaryRepairOmit(string module_name, string header, string description) ``{

      return (OSRSummaryChangeModuleSummary(module_name, header, description, "repair_omit"));
  }

}
