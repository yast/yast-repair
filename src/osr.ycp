/**
 *  File:
 *    osr.ycp
 *
 *  Module:
 *    YaST2 OS Repair - automatic error detection & repair tool for Linux.
 *
 *  Summary:
 *    This file provides the framework of the YaST2 OS Repair tool. It contains some
 *    main functions that control the detection and repair process and some additional
 *    functions which form the interface for the detection and repair modules.
 *
 *  Author:
 *    Michael Koehrmann <curry@suse.de>
 */

/***
 *
 *  YaST2 OS Repair
 *
 */

{
  textdomain "osr";

  include "ui/common_popups.ycp";
  include "ui/wizard_dialog.ycp";
  include "osr/osr_system.ycp";
  include "osr/osr_api.ycp";
  include "osr/osr_summary.ycp";
  include "osr/osr_popup.ycp";
  include "osr/osr_module_progress.ycp";
  include "osr/osr_global_progress.ycp";
  include "osr/osr_log_file.ycp";

  ////////////////////////////////////////////////////////////////////////////////
  //
  //  GLOBAL VARIABLES
  //
  ////////////////////////////////////////////////////////////////////////////////

  // List for the modules and an index.
  list osr_module_list     = [];
  
  // A map with all informations...
  map osr_map              = $[];

  ////////////////////////////////////////////////////////////////////////////////
  //
  //  ARGUMENT HANDLING
  //
  ////////////////////////////////////////////////////////////////////////////////

  integer arg_n = 0;

  boolean normal_mode    = true;       // The normal mode with GUI and user-interaction.
  boolean automatic_mode = false;      // Automatic detection and repair, no user-interaction but GUI.
  boolean demo_mode      = false;      // No real error-detection or repair, only demonstration, GUI.
  boolean detection_mode = false;      // Only detection, no repair, GUI.
  boolean script_mode    = false;      // No GUI, no user-interaction, input-values come from a map.
  boolean provides_mode  = false;      // Prints the values provided by the detection-modules to the file /tmp/osr_global_provides.

  if      ( size(Args()) == 0 ) normal_mode = true;
  else if ( size(Args()) > 1 )
  {
      y2error("ERROR: too many arguments: %1, no more than one allowed.", size(Args()) );
      return `error;
  }
  else
  {
      while ( arg_n < size(Args()) )
      {
	  if      ( Args(arg_n) == .automatic ) automatic_mode = true;
	  else if ( Args(arg_n) == .auto      ) automatic_mode = true;
	  else if ( Args(arg_n) == .demo      ) demo_mode      = true;
	  else if ( Args(arg_n) == .detection ) detection_mode = true;
	  else if ( Args(arg_n) == .detect    ) detection_mode = true;
	  else if ( Args(arg_n) == .normal    ) normal_mode    = true;
	  else if ( Args(arg_n) == .script    ) script_mode    = true;
	  else if ( Args(arg_n) == .provides  ) provides_mode  = true;
	  else
	  {
	      y2error("ERROR: unknown option %1", Args(arg_n) );
	      return `error;
	  }
	  arg_n = arg_n + 1;
      }
  }

  map mode_map = $[
		   "automatic_mode" : automatic_mode,
		   "demo_mode"      : demo_mode,
		   "detection_mode" : detection_mode,
		   "normal_mode"    : normal_mode,
		   "script_mode"    : script_mode,
		   "provides_mode"  : provides_mode
  ];
  
  osr_map = add(osr_map, "mode_map", mode_map);

  ////////////////////////////////////////////////////////////////////////////////
  //
  //  METHODS
  //
  ////////////////////////////////////////////////////////////////////////////////

  /**
   *  This method initializes the YaST2 OS Repair system. It is started at first and
   *  builds the main window, the global osr_map and a lot of other data.
   *
   *  For internal use only.
   *
   *  @return boolean True if the initialization progress succeeded.
   */
  define OSRInit() ``{

      osr_map = $[
		  "module_sequence"              : [],
		  "module_list"                  : [],
		  "log_file"                     : "/tmp/osr.log",
		  "global_progress_increment"    : 500,
		  "global_progress_length"       : 10000,
		  "has_download_progress_widget" : true
      ];
      
      string log_file = "";
      string header   = "";

      if (!script_mode)
      {
	  header = UI(_("YaST2 OS Repair"));

	  if (demo_mode)
	  {
	      header = UI(_("YaST2 OS Repair: demo mode"));
	  }
	  else if (automatic_mode)
	  {
	      header = UI(_("YaST2 OS Repair: automatic mode"));
	  }
      
	  // display the main window to indicate progress
	  UI(``{
	      OpenDialog(`opt(`defaultsize),
			 `VBox(`Image(`suseheader, "SuSE"),
			       `HBox(`HWeight(30, `RichText(`id(`help), "")),
				     `HWeight(70, `VBox(
							`Left(`Heading(`id(`title), `opt(`hstretch), WFM::header + _("\nInitialization..."))),
							`HVCenter(`ReplacePoint(`id(`contents),     `Empty())),
							`HBox(
							      // back pushbutton: the user input is ignored and the last dialog is called
							      `PushButton(`id(`back), `opt(`disabled), _("&Back")),
							      `HStretch(),

							      // Skip pushbutton
							      `PushButton(`id(`skip), `opt(`disabled), _("&Skip")),
							      `HStretch(),

							      // Abort pushbutton
							      `PushButton(`id(`abort), `opt(`disabled), _("&Abort")),
							      `HStretch(),

							      // next pushbutton: finish the configuration
							      `PushButton(`id(`next), `opt(`disabled), _("&Next"))
							      )
							)
					      )
				     )
			       )
			 );
	      ChangeWidget(`id(`abort), `Enabled, false);
	  });
      
	  if (!UI(`HasSpecialWidget(`DownloadProgress)))
	  {
	      osr_map = add(osr_map, "has_download_progress_widget", false);

	      /*
		if (!automatic_mode)
		{
		// show error message and close the main window
		UI(`ErrorPopup(_("Some special widgets are not available.")));

		return false;
		}
	      */
	  }
      }

      // read the list of modules from the specified file, the list has to look like this:
      // [`osr_module_init(), `osr_module_lilo()]
      list osr_module_list = SCR(`Read (.target.ycp, "/usr/lib/YaST2/osr_module_list.ycp"));

      // add .init to the symbols
      list temp_list = [];
      foreach(`n, osr_module_list, ``{temp_list = add(temp_list, add(n, .init));});
      osr_module_list = temp_list;

      // get the name of the global log-file and set it up
      log_file = OSRLogFileGet();
      if (!OSRLogFileSetup(log_file))
      {
	  return false;
      }
      
      integer index    = 0;
      
      // execute the init-functions of all modules in the module-list
      while((index >= 0) && (index < size(osr_module_list)))
      {
	  map result_map   = $[];
	  map provides_map = $[];

	  // the result of evaluation is the module_map
	  result_map     = CallFunction(select(osr_module_list, index));
	  provides_map   = lookup(result_map, "provides", $[]);
	  
	  // add the module_map to the global osr_map
	  osr_map        = add(osr_map, lookup(result_map, "name", $[]), result_map);

	  // add the provides map to the global osr_map
	  osr_map        = add(osr_map, "global_provides" ,lookup(result_map, "provides", $[]) );

	  // add the name of the module to the unsorted module_list
	  osr_map        = OSRAddToModuleList(lookup(result_map, "name"));
	  
	  // increase the index counter
	  index = index + 1;
      }

      // create the sequence list, provides- and requirement-resolver
      if (OSRComputeModuleSequence())
      {
	  y2debug("OSRInit: all dependencies between the modules successfully solved.");
      }
      else
      {
	  y2error("ERROR OSRInit: not all dependencies between the modules successfully solved!");

	  if (!automatic_mode)
	  {
	      // show error message and close the main window
	      UI(`ErrorPopup(_("Not all dependencies between the modules\nwere successfully solved.\n\nYaST2 OS Repair halts now.")));
	  }
	  return false;
      }
      
      if (!script_mode)
      {
      
	  UI(`ChangeWidget(`id(`title), `Value, header + UI(_("\nInitialization succeeded"))));

	  // Build window contents
	  UI(``{
	      term    download_progress      = `Empty();
	      term    progress_bar           = `Empty();
	      term    buttons_right          = `Empty();
	      term    rich_text              = `Empty();
	      term    contents               = `Empty();
	      string  help_text              = "";
	      integer global_progress_length = 1000;

	      global_progress_length = lookup(WFM::osr_map, "global_progress_length", 1000);
	  
	      /*
		buttons_right = `HSquash(`Top(`VBox(`PushButton(`id(`repair),`opt(`disabled),_("&Repair")),`PushButton(`id(`help_button),
		`opt(`hstretch),_("&Help")))));
	      */

	      // only use a DownloadProgress widget if supported
	      if (WFM::OSRHasDownloadProgressWidget())
	      {
		  download_progress = `DownloadProgress(
							`id(`module_progress_bar),
							_("Module check"),
							"/tmp/module_progress_bar",
							1000
							);
	      }

	      progress_bar = `ProgressBar(
					  `id(`global_progress_bar),
					  "System check",
					  global_progress_length
					  );

	      rich_text = `RichText(
				    `id(`rich_text_info),
				    ""
				    );
	  
	      // Contents of the dialog	  
	      contents = `VBox(
			       `VSpacing(0.3),
			       `HBox(
				     rich_text,
				     buttons_right
				     ),
			       `HBox(
				     download_progress
				     ),
			       `HBox(
				     progress_bar
				     ),
			       `VSpacing(0.5)
			       );
	  	  
	      // Help text (HTML-like) START
	      help_text =  _("<p><b>YaST2 OS Repair</b> now checks your system.</p>");
	      help_text = help_text +  _("<p>This can take some time depending on the system conditions.</p>");

	      SetWizardContents(
				_("YaST2 OS Repair - System check"),
				contents,
				help_text,
				false,         // have_back_button
				false          // have_next_button
				);
	  });

	  // set the increment value for the global progress bar
	  OSRGlobalProgressSetIncrement();
      }

      //SCR(`Write(.dumpto.tmp.osr_map, osr_map));
      
      return true;
  }

  /**
   *  With this function a new module entry is added to the list module_list in the
   *  global osr_map.
   *
   *  For internal use only.
   *
   *  @param string entry The new entry as a string.
   *  @return map The osr_map with the new entry in the module_list.
   */
  define OSRAddToModuleList(string entry) ``{

      list temp_list = [];

      // get the old module_list from the osr_map
      temp_list = lookup(osr_map, "module_list");

      // add the new entry to the list
      temp_list = add(temp_list, entry);

      // return the addition of the new module_list to the osr_map
      return add(osr_map, "module_list", temp_list);
  }
  
  
  /**
   *  This is the main detection method. It looks for the module_sequence and
   *  executes all detection methods from the forthcoming modules.
   *
   *  For internal use only.
   *
   *  @return boolean True if the detection progress succeeded.
   */
  define OSRDetect() ``{

      integer index_modules   = 0;
      integer index_detect    = 0;
      string  module_name     = "";
      string  status          = "";
      list    detect_methods  = [];
      list    module_sequence = [];
      map     result_map      = $[];
      map     module_map      = $[];

      module_sequence = lookup(osr_map, "module_sequence", []);

      if ( size(module_sequence) <= 0 )
      {
	  y2error("OSRDetect ERROR: list module_sequence is empty: %1", module_sequence);
	  return false;
      }

      while ( index_modules < size(module_sequence) )
      {
	  module_name    = select(module_sequence, index_modules, "");
          module_map     = lookup(osr_map, module_name, $[]);
	  detect_methods = lookup(module_map, "detect_methods");
	  
	  // reset some values to empty before re-entry into the loop!
	  index_detect   = 0;
	  result_map     = $[];
	  status         = "";
	      
	  // execute all detect-functions of the specified module
	  while((index_detect >= 0) && (index_detect < size(detect_methods)))
	  {
	      // evaluate the functions and get the result_map
	      result_map      = eval(select(detect_methods, index_detect));

	      // get some information from the result_map
	      status          = lookup(result_map, "status", "");
	      
	      if (status == "detect_ok")
	      {
		  // if no error detected go to the next detection-method
		  OSRGlobalProgressIncrease();
		  index_detect = index_detect + 1;
	      }
	      else if (status == "detect_error")
	      {
		  // if an error was detected but no repair method started
		  // restart the current detection method
	      }
	      else if (status == "repair_ok")
	      {
		  // if all detected errors were repaired restart the current
		  // detection method
	      }
	      else if (status == "repair_error")
	      {
		  // if the repair-method was not successfull restart the current
		  // detection method
	      }
	      else if (status == "repair_omit")
	      {
		  // if the user omitted repairing go to the next detection method
		  OSRGlobalProgressIncrease();
		  index_detect = index_detect + 1;
	      }
	      else
	      {
		y2error("not a valid status: %1", status);
	      }
	  }
	  // save the result map in the global osr_map
	  //module_map = add(module_map, "result_map", result_map);
	  //osr_map    = add(osr_map, module_name, module_map);

	  OSRModuleProgressFill();
	  
	  // go to the next module
	  index_modules = index_modules + 1;
      }

      // fill up the global-progress-bar to 100%, this can be neccessary because of
      // arithmetic rounding problems
      OSRGlobalProgressFill();
      
      return true;
  }

  /**
   *  Return true if user id is 0 (user is root).
   *
   *  For internal use only.
   *
   *  @see .runtime.username
   *  @return boolean True if the osr module was run by root.
   */
  define OSRAmIRoot() ``{

      string user_name = "";

      user_name = SCR(`Read(.runtime.username));

      return (user_name == "root");
      
      /*
      map     ret          = $[];
      string  command      = "";
      string  user_name    = "";
      integer exit_code    = 0;

      command   = "/usr/bin/whoami";
      
      // format of ret should be $["exit":0, "stderr":"", "stdout":"root\n"]
      ret       = SCR (`Execute(.target.bash_output, command));

      exit_code = lookup(ret, "exit",   1);
      user_name = lookup(ret, "stdout", "");
      
      //y2debug("WHOAMI: %1", ret);
	
      if (exit_code == 0)
      {
	  return (user_name == "root\n");
      }

      // otherwise there was a trouble running whoami so we assume we are root
      // so user can continue
      // ???
      return true;
      */
  }
  
  ////////////////////////////////////////////////////////////////////////////////
  //
  //  MAIN
  //
  ////////////////////////////////////////////////////////////////////////////////

  if (provides_mode)
  {
      integer index                = 0;
      map     global_provides_map  = $[];
      list    osr_module_list      = [];

      osr_module_list = SCR(`Read (.target.ycp, "/usr/lib/YaST2/osr_module_list.ycp"));

      // add .init to the symbols
      list temp_list = [];
      foreach(`n, osr_module_list, ``{temp_list = add(temp_list, add(n, .init));});
      osr_module_list = temp_list;

      // execute the init-functions of all modules in the module-list
      while((index >= 0) && (index < size(osr_module_list)))
      {
	  map    result_map   = $[];
	  map    provides_map = $[];
	  string module_name  = "";

          // the result of evaluation is the module_map
	  result_map     = CallFunction(select(osr_module_list, index));
	  provides_map   = lookup(result_map, "provides", $[]);

	  // add the module_map to the global osr_map
	  module_name    = lookup(result_map, "name", "");
	  osr_map        = add(osr_map, module_name, result_map);

	  // add the provides map to the global osr_map
          global_provides_map = lookup(osr_map, "global_provides", $[]);
	  global_provides_map = add(global_provides_map, module_name, provides_map);
	  osr_map             = add(osr_map, "global_provides", global_provides_map);

	  // increase the index counter
	  index = index + 1;
      }
      global_provides_map = lookup(osr_map, "global_provides", $[]);

      // save the global-provides-map to the /tmp-directory
      SCR(`Write(.dumpto.tmp.osr_global_provides, global_provides_map));

      return;
  }
  
  if (!demo_mode)
  {
      if (!OSRAmIRoot())
      {
	  UI(`AnyMessagePopup(_("YaST2 OS Repair: Error"),
			      _("You have to be logged in as root in order to start\nthe rescue system.\n\nYaST2 OS Repair halts now.")
			      ));
      
	  return;
      }
  }
  
  if (!OSRInit())
  {
      return UI(`CloseDialog());
  }

  if (!OSRDetect())
  {
      return UI(`CloseDialog());
  }

  if (!script_mode)
  {
  // enable the next-button
  UI(``{
      ChangeWidget(`id(`next), `Enabled, true);
      SetFocus(`id(`next));
  });
  
  // wait for user input
  any user_input = nil;

  if (automatic_mode) user_input = `next;
      
  while(user_input != `next)
  {
      user_input = UI(`UserInput ());
  }

  //ShowFilePopup("YaST2 OS Repair: osr_map", "/tmp/osr_map");

  //ShowFilePopup("YaST2 OS Repair: osr_log_file", lookup(osr_map, "osr_log_file", "/tmp/osr.log"));
  
  return UI(`CloseDialog());
  }
  else
  {
      return;
  }

  /*
  // definition of map user_settings  
  map user_settings = $[];
  
  //  set "os_repair_status" `off
  user_settings = add(user_settings, "osr_status", `off);

      
    
      global define SetContents(string title, term contents, string helptext,
				boolean has_back, boolean has_skip, boolean has_abort, boolean has_next) ``{
	  ChangeWidget(`id(`next),  `Enabled, has_next);
	  ChangeWidget(`id(`back),  `Enabled, has_back);
	  ChangeWidget(`id(`skip),  `Enabled, has_skip);
	  ChangeWidget(`id(`abort), `Enabled, has_abort);
	  ChangeWidget(`id(`help),  `Value,   helptext);
	  ChangeWidget(`id(`title), `Value,   title);
	  ReplaceWidget(`id(`contents), contents);
      };



  user_settings = add( user_settings, "demo_mode", demo_mode );
  user_settings = add( user_settings, "auto_mode", auto_mode );
  */
  
  /*
   * Main dialog cycle
   *
   */

  /*
  integer osr_module_list_index = 0;

  any result = `next;

  while ((osr_module_list_index >= 0) && (osr_module_list_index < size (osr_module_list))) {
    
      result = eval(select(osr_module_list, osr_module_list_index));
    
      if ( result == `cancel )
      {
	  break;
      }
      else if ( result == `skip )
      {
	  osr_module_list_index = osr_module_list_index + 1;
      }
      else if ( result == `next )
      {
	  osr_module_list_index = osr_module_list_index + 1;
      }
      else if ( result == `back )
      {
	  osr_module_list_index = osr_module_list_index - 1;
      }
      else if ( result == `finish )
      {
	  break;
      }
  }
  */
  
  //return UI(`CloseDialog());
}
