/**
 * File:
 *   osr_module_init.ycp
 *
 * Module:
 *   YaST2 OS Repair init module.
 *
 * Summary:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Author:
 *   Michael Koehrmann <curry@suse.de>
 *
 * $Id$
 */

{
  textdomain "osr";

  /**
   *  argument handling
   *  example: "y2bignfat osr_lilo.ycp '(.init)' qt" for init_mode
   *  or:      "CallFunction(`osr_lilo(.init));
   */
  integer arg_c = size(Args());
  integer arg_n = 0;

  boolean init_mode = false;
  
  while ( arg_n < arg_c )
  {
      if ( Args(arg_n) == .init ) init_mode = true;
      else
      {
	  y2error("ERROR: unknown option %1", Args(arg_n) );
	  return `error;
      }
      arg_n = arg_n + 1;
  }

  //////////////////////////////////////////////////////////////////////
  //
  //  METHODS
  //
  //////////////////////////////////////////////////////////////////////

  /**
   *  Initialization of the module map that contains all important information
   *  for this module.
   *
   *  @return map The map that contains all information about the module osr_module_init.
   */
  define OSRInitInit() ``{

      y2debug("OSRInitInit");

      map  osr_module_init = $[];

      osr_module_init = $[
		   "name"           :  "osr_module_init",
		   "headline"       :  _("Init"),
		   "summary"        :  [],
		   "test_mode_summary" : [
					  $["header" : "Init test mode", "description" : "o.k.", "error" : false],
		   ],
		   "detect_methods" :  [
					``(OSRInitConvertUserSettings())
		   ],
		   "provides"       : $[
					"repair_target"      : $[ "type" : "string", "value" : "", "status" : "unknown" ],
					"target_map"         : $[ "type" : "map", "value" : $[], "status" : "unknown" ],
					"disk_device_list"   : $[ "type" : "list", "value" : ["/dev/hda"], "status" : "unknown" ],
					"root_partition"     : $[ "type" : "string", "value" : "/dev/hda1", "status" : "unknown" ],
					"root_partition_map" : $[ "type" : "map", "value" : $[], "status" : "unknown" ],
					"kernel_path_list"   : $[ "type" : "list", "value" : ["/boot/vmlinuz", "/boot/vmlinuz.suse"], "status" : "unknown"],
					"initrd_path_list"   : $[ "type" : "list", "value" : ["/boot/initrd", "/boot/initrd.suse"],  "status" : "unknown"],
					"fstab_list"         : $[ "type" : "list", "value" : [], "status" : "unknown" ]
		   ],
		   "requires"       :  [],
		   "progress_file"  : "/tmp/osr_module_init_progress",
		   "progress_expect" : 1000
      ];
      
      return osr_module_init;
  }

  /**
   *  @return 
   */
  global define OSRInitRepair() ``{

      y2debug("OSRInitRepair");
  }

  //////////////////////////////////////////////////////////////////////
  //
  //  DETECTION METHODS
  //
  //////////////////////////////////////////////////////////////////////

  /**
   *  Offers some neccesary values from the map user_settings from inst_startup.ycp to
   *  the global map osr_map.
   *
   *  Provides: map target_map,
   *            string repair_target
   *
   *  @return map The result map.
   */
  global define OSRInitConvertUserSettings() ``{

      boolean error_detected  = false;
      boolean repair_question = false;
      integer result          = 1;
      string  command         = "";
      map     result_map      = $[];
      string  module_name     = "osr_module_init";
      string  status          = "";
      map     target_map      = $[];
      string  repair_target   = "";

      y2debug("OSRInitConvertUserSettings");

      OSRModuleProgress::SetParams(_("Converting user-settings"), OSRGetTmpDir() + "/osr_module_init_progress", 10);

      target_map     = lookup (user_settings, "targets",      $[]);
      repair_target  = lookup (user_settings, "updateTarget", "");

      // if the rescue-system is launched from a running Linux-system the target-directory is empty, else "/mnt"
      if (!Installation::initial_mode && !Installation::continue_mode)
      {
	  repair_target = "";
      }
      else
      {
	  repair_target = "/mnt";
      }

      OSRModuleProgress::Add(5);

      OSRProvideMap("target_map", target_map);
      OSRProvideString("repair_target", repair_target);

      OSRModuleProgress::Add(5);

      status = OSRStatusDetectOK();

      OSRSummaryDetectOK(
			 module_name,
			 _("Converting user-settings"),
			 _("O.k.")
			 );

      result_map = $[
		     "status"         : status,
		     "error_detected" : error_detected,
		     "error_repair"   : repair_question
      ];

      OSRModuleProgress::Fill();
      
      return result_map;
  }

  //////////////////////////////////////////////////////////////////////
  //
  //  MAIN
  //
  //////////////////////////////////////////////////////////////////////
  
  if (init_mode)
  {
      map test_map = OSRInitInit();
      //SCR::Write(.dumpto.tmp.osr_module_init, test_map);

      return test_map; 
  }
}
