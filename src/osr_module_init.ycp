/**
 * File:
 *   osr_module_init.ycp
 *
 * Module:
 *   YaST2 OS Repair init module.
 *
 * Summary:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Author:
 *   Michael Koehrmann <curry@suse.de>
 *
 * $Id$
 */

{
 
  import "Storage";
  import "Mode";

  
  import "OSR";
  import "OSRSummary";
  import "OSRFloppy";
  import "OSRPopup";
  
  textdomain "repair";
  
  /**
   *  argument handling
   *  example: "y2bignfat osr_lilo.ycp '(.init)' qt" for init_mode
   *  or:      "CallFunction(`osr_lilo(.init));
   */
  integer arg_n = 0;
  
  //////////////////////////////////////////////////////////////////////
  //
  //  METHODS
  //
  //////////////////////////////////////////////////////////////////////

  /**
   *  Initialization of the module map that contains all important information
   *  for this module.
   *
   *  @return map The map that contains all information about the module osr_module_init.
   */
  global define map OSRInitInit() ``{

      y2debug("OSRInitInit");
      
      return  $[
		"name"           :  "osr_module_init",
		"headline"       :  _("OSRInit"),
		"global_entries" : $[
				     "init" : $[
						"text"	: _("Init repair system"),
						"help"  : _("TODO"),
						"mode"  : "forall"
						]
		],
		
		"detect_methods" :  [ $[ "summary"  : _("Probing floppy"),
					 "method"   : ``(OSRInitSelectFloppy()) ,
				         "requires" : [],
				         "provides" : [ "has_floppy"],
					 "group"    : "init",
					 "progress" : 10
				      ],
    				      $[ "summary"  : _("Init target system"),
					 "method"   : ``(OSRInitTarget()),
					 "requires" : [],
                                         "provides" : ["repair_target"],
					 "group"    : "init",
					 "progress" : 10
				      ]
		]
      ];
    
  }


  //////////////////////////////////////////////////////////////////////
  //
  //  DETECTION METHODS
  //
  //////////////////////////////////////////////////////////////////////

  /**
   *  Offers some neccesary values from the map user_settings from inst_startup.ycp to
   *  the global map osr_map.
   *
   *  Provides: map target_map,
   *            string repair_target,
   *            string floppy_device,
   *            boolean has_floppy
   * 
   *  @return map The result map.
   */
  global define boolean OSRInitSelectFloppy() ``{
       
      ///////////////////////////////////////////////////////////////////////////////////
      //
      //  Check Floppy
      //
      ///////////////////////////////////////////////////////////////////////////////////
      
      if  ( size( StorageDevices::FloppyDrives) == 1 )
      {	  
	  OSRSummary::DetectOK("",sformat(_("Floppy device found on %1"), OSRFloppy::floppy_device ));
	  
	  OSR::ProvideBoolean("has_floppy", true);
      }
      
      else if ( size( StorageDevices::FloppyDrives)  > 1 )
      {	  
	  OSRSummary::DetectOK("", sformat(_("Several floppy devices found<br>%1"),
					   mergestring(StorageDevices::FloppyDrives, " ,")));


	  // let the user select the floppy device to use
	  OSRFloppy::floppy_device = OSRPopup::RadioButtonGroup(
					     _("Select one of the floppy devices"),
					     _("You have to select one of the floppy
devices for later use."),
					     StorageDevices::FloppyDrives,
					     "",
					     true
					     );

	  OSRSummary::DetectOK("", sformat(_("Selected floppy device %1"), OSRFloppy::floppy_device));

	  OSR::ProvideBoolean("has_floppy", true);
      }
      else
      {	
  	  OSRSummary::NotFound("",  _("No floppy device found"));
	  
	  OSR::ProvideBoolean("has_floppy", false );
	  return false;
      }
      
      return true;
  }

  
  global define boolean OSRInitTarget()``{

      OSRSummary::DetectOK("", _("Target system initialised"));
      
      // if the rescue-system is launched from a running Linux-system the target-directory is empty, else "/mnt"
      if (!Mode::initial && !Mode::cont)
      {
	  OSR::ProvideString("repair_target", "") ;
      }
      else
      {
	  OSR::ProvideString("repair_target", "/mnt") ; 
      }

      return true;
  }
  
  
  //////////////////////////////////////////////////////////////////////
  //
  //  MAIN
  //
  //////////////////////////////////////////////////////////////////////

  while ( arg_n <  size(Args()) )
  {
      if ( Args(arg_n) == .init )
      {
	  y2milestone("Argument: %1", Args(arg_n));
	  return  OSRInitInit();
      }
      else
      {
	  y2error("ERROR: unknown option %1", Args(arg_n) );
	  return $[];
      }
      arg_n = arg_n + 1;
  }
}
