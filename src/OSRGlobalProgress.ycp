/**
 * File:
 *   OSRGlobalProgress.ycp
 *
 * Module:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Summary:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Author:
 *   Michael Koehrmann <curry@suse.de>
 *
 * $Id$
 */

{
  module "OSRGlobalProgress";

  //global symbol global_progress_id = `global_progress_bar;
  symbol  global_progress_id = `global_progress_bar;

  string  label              = "";
  integer current_value      = 0;
  integer increment          = 0;

  global integer length      = 0;

  /**
   *  Constructor.
   *
   *  For internal use only.
   */
  global define OSRGlobalProgress() ``{

      label         = "";
      length        = 1000;
      current_value = 0;
      increment     = 0;
  };

  //////////////////////////////////////////////////////////////////
  //
  //  Set-methods
  //
  //////////////////////////////////////////////////////////////////

  /**
   *  Set the label of the global-progress-bar to the specified one.
   *
   *  For internal use only.
   *
   *  @param string new_label The new label.
   *  @return boolen True if the label was set correctly.
   */ 
  global define SetLabel(string new_label) ``{

      label = new_label;

      return (UI::ChangeWidget(`id(WFM::global_progress_id), `Label, WFM::label));
  };

  /**
   *  Set the length of the global-progress-bar to the specified one.
   *
   *  For internal use only.
   *
   *  @param string new_length The new length.
   *  @return boolen True if the label was set correctly.
   */ 
  global define SetLength(integer new_length) ``{

      // TODO: not possible to change length at runtime!
      length = new_length;

      //return (UI::ChangeWidget(`id(OSRGlobalProgress::global_progress_id), `Length, OSRGlobalProgress::length);
      return true;
  };
  
  /**
   *  Set the value of the global-progress-bar to the specified one.
   *
   *  For internal use only.
   *
   *  @param integer value The new value.
   *  @return boolen True if the value was set correctly.
   */ 
  global define SetCurrentValue(integer value) ``{

      current_value = value;

      return (UI::ChangeWidget(`id(WFM::global_progress_id), `Value, WFM::value));
  };
    
  //////////////////////////////////////////////////////////////////
  //
  //  Get-methods
  //
  //////////////////////////////////////////////////////////////////
  
  /**
   *  Gets the current value from the UI-interpreter.
   *
   *  For internal use only.
   *
   *  @return integer The current value of the global-progress-bar.
   */
  global define GetCurrentValue() ``{

      current_value = UI::QueryWidget(`id(WFM::global_progress_id), `Value);

      return current_value;
  };
  
  /**
   *  Get the length of the global_progress_bar.
   *
   *  For internal use only.
   *
   *  @return integer The length of the global_progress_bar.
   */
  global define GetLength() ``{

      return length;
  };
  
  //////////////////////////////////////////////////////////////////
  //
  //  Other methods
  //
  //////////////////////////////////////////////////////////////////

  /**
   *  Computes the increment value of the global progress bar. This increment
   *  is added to the current progress value after one detection method was
   *  executed. It is dependent on the total number of detection methods the
   *  rescue system provides. The length of the global progress bar is stored
   *  in the osr_map at key "global_progress_length".
   *
   *  For internal use only.
   *
   *  @return boolean True if the increment value was successfully computed.
   */
  global define ComputeIncrement(list module_sequence, map osr_detect_method_map) ``{
      
      integer number_of_detection_methods = 0;

      if (size(module_sequence) > 0)
      {
	  foreach (`mod, module_sequence, ``{

	      // count the total number of detection methods
	      number_of_detection_methods = number_of_detection_methods +
		  size(lookup(osr_detect_method_map, mod, $[]));
	  });

          /*
	    while((index >= 0) && (index < size(module_sequence)))
	    {
	    // count the total number of detection methods
	    number_of_detection_methods = number_of_detection_methods +
	    size(lookup(osr_detect_method_map, select(module_sequence, index), $[]));
	      
	    index = index + 1;
	    }
          */

	  increment = length / tointeger(number_of_detection_methods);

	  y2debug("INCREMENT: %1, %2, %3", increment, length, tointeger(number_of_detection_methods) );

	  return true;
      }
      else
      {
	  y2error("OSRGlobalProgressSetIncrement ERROR: list module_sequence is empty: %1", module_sequence);

	  return false;
      }
  };

  /**
   *  Fills the global-progress-bar with 100%.
   *
   *  For internal use only.
   *
   *  @return boolean True if the progress value was increased successfully.
   */
  global define Fill() ``{

      return (UI::ChangeWidget(`id(WFM::global_progress_id), `Value, WFM::length));
  };

  /**
   *  This method is called after one detection function is successfully executed.
   *  It shows the continuous progress to the user with the global progress bar.
   *
   *  For internal use only.
   *
   *  @return boolean True if the progress value was increased successfully.
   */
  global define Increase() ``{

      current_value = current_value + increment;
      
      return (UI::ChangeWidget(
			      `id(WFM::global_progress_id),
			      `Value,
			      WFM::current_value
			      ));
  };

  /**
   *  This method is called after an error is found. It sets the global progress
   *  bar back to the value where the error was detected.
   *
   *  For internal use only.
   *
   *  @return boolean True if the progress value was decreased successfully.
   */
  global define Decrease() ``{

      if (current_value >= increment)
      {
	  current_value = current_value - increment;
	  
	  return (UI::ChangeWidget(
				   `id(WFM::global_progress_id),
				   `Value,
				   WFM::current_value
				   ));
      }
      else
      {
	  return false;
      }
  };
}
