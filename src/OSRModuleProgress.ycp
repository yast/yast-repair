/**
 * File:
 *   OSRModuleProgress.ycp
 *
 * Module:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Summary:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Author:
 *   Michael Koehrmann <curry@suse.de>
 *
 * $Id$
 */

{
  module "OSRModuleProgress";

  //global symbol module_progress_id = `module_progress_bar;
  //global symbol `module_progress_bar = `module_progress_bar;

  symbol  module_progress_id           = `module_progress_bar;
  
  boolean has_download_progress_widget = false;
  string  label                        = "";
  string  file                         = "";
  integer current_size                 = 0;

  global integer length                = 0;

  /**
   *  Constructor.
   *
   *  API function.
   *
   *  @example import "OSRModuleProgress";
   */
  global define OSRModuleProgress() ``{

      has_download_progress_widget = HasDownloadProgressWidget();

      if (has_download_progress_widget)
      {
	  label         = "";
	  file          = "";
	  length        = 1000;
	  current_size  = 0;
      }
  };

  /**
   *  With this method the parameters for the DownloadProgress widget can be
   *  specified. This could be used during the execution of detection methods
   *  from different modules. The developer of a module should use this method
   *  instead of directly using `ChangeWidget(...).
   *
   *  API function.
   *
   *  @param string  new_label New label as a string.
   *  @param string  new_file New filename as a string.
   *  @param integer new_length The expected filesize in bytes.
   *  @return boolean True if all widget parameters were changed successfully.
   *  @example OSRModuleProgress::SetParams("Checking LILO package", "/tmp/osr_lilo_progress", 4200);
   */
  global define SetParams(string new_label, string new_file, integer new_length) ``{

      label  = new_label;
      file   = new_file;
      length = new_length;

      if (has_download_progress_widget)
      {
	  string command  = "";
	  string log_file = "";

	  // delete the old progress_file, if it exists
	  command  = sformat("if test -f %1; then rm %1; fi", file);
	  //log_file = OSRLogFile::GetFile();
	  //OSRExecuteCommand(command, log_file);
	  SCR::Execute(.target.bash, command);

	  /*
	  UI::ChangeWidget(`id(WFM::module_progress_id), `Label,        WFM::label);
	  UI::ChangeWidget(`id(WFM::module_progress_id), `Filename,     WFM::file);
	  UI::ChangeWidget(`id(WFM::module_progress_id), `ExpectedSize, WFM::length);

	  return true;
	  */

	      return (
		  UI::ChangeWidget(`id(WFM::module_progress_id), `Label,        WFM::label) &&
		  UI::ChangeWidget(`id(WFM::module_progress_id), `Filename,     WFM::file)  &&
		  UI::ChangeWidget(`id(WFM::module_progress_id), `ExpectedSize, WFM::length)
		  );
      }
      else
      {
	  return false;
      }
  };

  /**
   *  Resets the parameters for the DownloadProgress widget.
   *
   *  API function.
   *
   *  @return boolean True if all widget parameters were changed successfully.
   */
  global define Reset() ``{

      length = 1000;
      label  = "";
      file   = "";

      if (has_download_progress_widget)
      {
	  string  command  = "";
	  string  log_file = "";
	  
	  // delete the old progress_file, if it exists
	  //log_file = OSRLogFile::GetFile();
	  command  = sformat("if test -f %1; then rm %1; fi", file);
	  //OSRExecuteCommand(command, log_file);
	  SCR::Execute(.target.bash, command);

	  return (
		  UI::ChangeWidget(`id(WFM::module_progress_id), `Label,        WFM::label) &&
		  UI::ChangeWidget(`id(WFM::module_progress_id), `Filename,     WFM::file)  &&
		  UI::ChangeWidget(`id(WFM::module_progress_id), `ExpectedSize, WFM::length)
		  );
      }
      else
      {
	  return false;
      }
  };
  
/**
 *  Specifies a new filename for the DownloadProgress widget.
 *
 *  API function.
 *
 *  @param string file Filename as a string.
 *  @return boolean True if the DownloadProgress widget exists and its expected filesize was changed successfully.
 *  @example OSRModuleProgress::SetFile("/tmp/osr_lilo_progress");
 */
  global define SetFile(string new_file) ``{

      file = new_file;
      
      if (has_download_progress_widget)
      {
	  string command  = "";
	  string log_file = "";

          // delete the old progress_file, if it exists
	  command  = sformat("if test -f %1; then rm %1; fi", file);
	  //log_file = lookup(osr::osr_map, "osr_log_file", "/tmp/osr.log");
	  //OSRExecuteCommand(command, log_file);
	  SCR::Execute(.target.bash, command);

	  return UI::ChangeWidget(`id(WFM::module_progress_id), `Filename, WFM::file);
      }
      else
      {
	  return false;
      }
  };

/**
 *  A new expected filesize for the DownloadProgress widget
 *  can be specified with this function.
 *
 *  API function.
 *
 *  @param The expected file-size in bytes.
 *  @return boolean True if the DownloadProgress widget exists and its expected filesize was changed successfully.
 *  @example OSRModuleProgress::SetLength(4200);
 */
  global define SetLength(integer new_length) ``{

      length = new_length;
      
      if (has_download_progress_widget)
      {
	  return UI::ChangeWidget(`id(WFM::module_progress_id), `ExpectedSize, WFM::length);
      }
      else
      {
	  return false;
      }
  };

/**
 *  Sets a new heading for the DownloadProgress widget.
 *
 *  API function.
 *
 *  @param string label The new label of the progress bar.
 *  @return boolean True if the DownloadProgress widget exists and its label was changed successfully.
 *  @example OSRModuleProgress::SetLabel("Checking LILO package");
 */
  global define SetLabel(string new_label) ``{

      label = new_label;
      
      if (has_download_progress_widget)
      {
	  return UI::ChangeWidget(`id(WFM::module_progress_id), `Label, WFM::label);
      }
      else
      {
	  return false;
      }
  };

/**
 *  Adds the specified number of characters to the progress file.
 *
 *  API function.
 *
 *  @param integer The number of characters to add to the progress file.
 *  @return boolean True if the DownloadProgress widget exists and the bytes were added successfully.
 */
  global define Add(integer bytes) ``{

      string  fill    = "";
      string  command = "";
      integer result  = 0;

      if (has_download_progress_widget)
      {
	  integer i = 0;
	  while (i >= 0 && i < (bytes - 1))
	  {
	      fill = sformat("%1#", fill);
	      i = i + 1;
	  }

	  command = sformat("echo \"%1\" >> %2", fill, file);
	  result  = SCR::Execute(.target.bash, command);
	  return ( result == 0);
      }
      else
      {
	  return false;
      }
  };

/**
 *  Fills the module-progress-file up with #-characters to the expected
 *  file-size.
 *
 *  API function.
 *
 *  @return boolean True if the DownloadProgress widget exists and the bytes were added successfully.
 */
  global define Fill() ``{

      integer current  = 0;
      integer diff     = 0;
      integer result   = 0;
      string  fill     = "";
      string  command  = "";
      
      if (has_download_progress_widget)
      {
	  current = GetValue();

	  if (current < 0)
	  {
	      y2debug("The progress file does not exist. %1", file);
	      current = 0;
	  }

	  diff = length - current;

	  if (diff >= 0)
	  {
	      integer i = 0;
	      while (i >= 0 && i <= (diff / 10))
	      {
		  fill = sformat("%1##########", fill);
		  i = i + 1;
	      }

	      command = sformat("echo \"%1\" >> %2", fill, file);
	      result  = SCR::Execute(.target.bash, command);
	      return (result == 0);
	  }
	  else
	  {
	      return true;
	  }
      }
      else
      {
	  return false;
      }
  };

/**
 *  This function returns the name of the file that is currently under the
 *  observation of the module progress bar.
 *
 *  API function.
 *
 *  @return string The name of the observated progress file.
 *  @example string module_progress_file = OSRModuleProgress::GetFile();
 */
  global define GetFile() ``{

      return UI::QueryWidget(`id(WFM::module_progress_id), `Filename);
  };

/**
 *  This function returns the expected file size of the module_progress-file.
 *
 *  API function.
 *
 *  @return integer The expected file size in bytes.
 *  @example integer filesize = OSRModuleProgress::GetLength();
 */
  global define GetLength() ``{

      return UI::QueryWidget(`id(WFM::module_progress_id), `ExpectedSize);
  };

/**
 *  This function returns the current value of the module_progress-bar.
 *
 *  API function.
 *
 *  @return integer The current file size in bytes.
 *  @example integer current_val = OSRModuleProgress::GetValue();
 */
  global define GetValue() ``{

      return SCR::Read(.target.size, WFM::file);
  };

/**
 *  Returns true if the current UI-interpreter supports the DownloadProgress-widget.
 *
 *  For internal use only.
 *
 *  @return boolean True if the current UI-interpreter supports the DownloadProgress-widget.
 */  
  global define HasDownloadProgressWidget() ``{

      return UI::HasSpecialWidget(`DownloadProgress);
  };
}
