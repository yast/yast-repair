/**
 * File:
 *   osr_module_progress.ycp
 *
 * Module:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Summary:
 *   YaST2 OS Repair. Automatic error detection & repair tool for Linux.
 *
 * Author:
 *   Michael Koehrmann <curry@suse.de>
 */

{
  textdomain "osr";

  /**
   *  With this method the parameters for the DownloadProgress widget can be
   *  specified. This could be used during the execution of detection methods
   *  from different modules. The developer of a module should use this method
   *  instead of directly using `ChangeWidget(...).
   *
   *  API function.
   *
   *  @param string  label  New label as a string.
   *  @param string  file   New filename as a string.
   *  @param integer expect The expected filesize in bytes.
   *  @return boolean True if all widget parameters were changed successfully.
   *  @example OSRModuleProgressSetParams("Checking LILO package", "/tmp/osr_lilo_progress", 4200);
   */
  global define OSRModuleProgressSetParams(string label, string file, integer expect) ``{

      if (OSRHasDownloadProgressWidget())
      {
	  string command  = "";
	  string log_file = "";

	  y2debug("jjjjjjjjjjj\n%1", file);
	  
	  // delete the old progress_file, if it exists
	  command  = sformat("if test -f %1; then rm %1; fi", file);
	  log_file = OSRLogFileGet();
	  OSRExecuteCommand(command, log_file);

	  return UI(``{
	      ChangeWidget(`id(`module_progress_bar), `Label,        WFM::label);
	      ChangeWidget(`id(`module_progress_bar), `Filename,     WFM::file);
	      ChangeWidget(`id(`module_progress_bar), `ExpectedSize, WFM::expect);
	  });
      }
  }

  /**
   *  Resets the parameters for the DownloadProgress widget.
   *
   *  API function.
   *
   *  @return boolean True if all widget parameters were changed successfully.
   */
  global define OSRModuleProgressReset() ``{

      if (OSRHasDownloadProgressWidget())
      {
	  integer expect   = 1000;
	  string  file     = "";
	  string  label    = "";
	  string  command  = "";
	  string  log_file = "";

	  file = OSRModuleProgressGetFile();
	  
	  // delete the old progress_file, if it exists
	  log_file = OSRLogFileGet();
	  command  = sformat("if test -f %1; then rm %1; fi", file);
	  OSRExecuteCommand(command, log_file);

	  return UI(``{
	      ChangeWidget(`id(`module_progress_bar), `Label,        WFM::label);
	      ChangeWidget(`id(`module_progress_bar), `Filename,     WFM::file);
	      ChangeWidget(`id(`module_progress_bar), `ExpectedSize, WFM::expect);
	  });
      }
  }

  /**
   *  Specifies a new filename for the DownloadProgress widget.
   *
   *  API function.
   *
   *  @param string file Filename as a string.
   *  @return boolean True if the DownloadProgress widget exists and its expected filesize was changed successfully.
   *  @example OSRModuleProgressSetFile("/tmp/osr_lilo_progress");
   */
  global define OSRModuleProgressSetFile(string file) ``{

      if (OSRHasDownloadProgressWidget())
      {
	  string command  = "";
	  string log_file = "";

	  // delete the old progress_file, if it exists
	  command  = sformat("if test -f %1; then rm %1; fi", file);
	  log_file = lookup(osr_map, "osr_log_file", "/tmp/osr.log");
	  OSRExecuteCommand(command, log_file);

	  return UI(`ChangeWidget(`id(`module_progress_bar), `Filename, WFM::file));
      }
      else
      {
	  return false;
      }
  }

  /**
   *  A new expected filesize for the DownloadProgress widget
   *  can be specified with this function.
   *
   *  API function.
   *
   *  @param The expected file-size in bytes.
   *  @return boolean True if the DownloadProgress widget exists and its expected filesize was changed successfully.
   *  @example OSRModuleProgressSetExpect(4200);
   */
  global define OSRModuleProgressSetExpect(integer expect) ``{

      if (OSRHasDownloadProgressWidget())
      {
	  return UI(`ChangeWidget(`id(`module_progress_bar), `ExpectedSize, WFM::expect));
      }
      else
      {
	  return false;
      }
  }

  /**
   *  Sets a new heading for the DownloadProgress widget.
   *
   *  API function.
   *
   *  @param string label The new label of the progress bar.
   *  @return boolean True if the DownloadProgress widget exists and its label was changed successfully.
   *  @example OSRModuleProgressSetLabel("Checking LILO package");
   */
  global define OSRModuleProgressSetLabel(string label) ``{

      if (OSRHasDownloadProgressWidget())
      {
	  return UI(`ChangeWidget(`id(`module_progress_bar), `Label, WFM::label));
      }
      else
      {
	  return false;
      }
  }

  /**
   *  Adds the specified number of characters to the progress file.
   *
   *  API function.
   *
   *  @param integer The number of characters to add to the progress file.
   *  @return boolean True if the DownloadProgress widget exists and the bytes were added successfully.
   */
  global define OSRModuleProgressAdd(integer bytes) ``{

      string file    = "";
      string fill    = "";
      string command = "";
      
      if (OSRHasDownloadProgressWidget())
      {
	  file = OSRModuleProgressGetFile();

	  integer i = 0;
	  while (i >= 0 && i < (bytes - 1))
	  {
	      fill = sformat("%1#", fill);
	      i = i + 1;
	  }

	  command = sformat("echo \"%1\" >> %2", fill, file);
	  return (SCR(`Execute(.target.bash, command)) == 0);
      }
      else
      {
	  return false;
      }
  }

  /**
   *  Fills the module-progress-file up with #-characters to the expected
   *  file-size.
   *
   *  API function.
   *
   *  @return boolean True if the DownloadProgress widget exists and the bytes were added successfully.
   */
  global define OSRModuleProgressFill() ``{

      integer expected = 1000;
      integer current  = 0;
      integer diff     = 0;
      string  file     = "";
      string  fill     = "";
      string  command  = "";
      
      if (OSRHasDownloadProgressWidget())
      {
	  file     = OSRModuleProgressGetFile();
	  expected = OSRModuleProgressGetExpectedSize();
	  current  = SCR(`Read(.target.size, file));

	  if (current < 0)
	  {
	      y2debug("The progress file does not exist. %1", file);
	      current = 0;
	  }

	  diff = expected - current;

	  if (diff >= 0)
	  {
	      integer i = 0;
	      while (i >= 0 && i <= (diff / 10))
	      {
		  fill = sformat("%1##########", fill);
		  i = i + 1;
	      }

	      command = sformat("echo \"%1\" >> %2", fill, file);
	      return (SCR(`Execute(.target.bash, command)) == 0);
	  }
	  else
	  {
	      return true;
	  }
      }
      else
      {
	  return false;
      }
  }

  /**
   *  This function returns the name of the file that is currently under the
   *  observation of the module progress bar.
   *
   *  API function.
   *
   *  @return string The name of the observated progress file.
   *  @example string module_progress_file = OSRModuleProgressGetFile();
   */
  global define OSRModuleProgressGetFile() ``{

      return UI(`QueryWidget(`id(`module_progress_bar), `Filename));
  }

  /**
   *  This function returns the expected file size of the module_progress-file.
   *
   *  API function.
   *
   *  @return integer The file size in bytes.
   *  @example integer filesize = OSRModuleProgressGetExpectedSize();
   */
  global define OSRModuleProgressGetExpectedSize() ``{

      return UI(`QueryWidget(`id(`module_progress_bar), `ExpectedSize));
  }

}
